using UnityEngine;
using System.Collections.Generic;
using Events;

/// <summary>
/// Manages the study room's appearance and placed items
/// </summary>
public class RoomManager : MonoBehaviour
{
    [SerializeField] private MeshRenderer wallRenderer;
    [SerializeField] private MeshRenderer floorRenderer;
    [SerializeField] private Transform roomItemsContainer;

    private Dictionary<ItemType, GameObject> activeItems = new Dictionary<ItemType, GameObject>();

    private void Awake()
    {
        LoadRoomState();
    }

    private void Start()
    {
        if (roomItemsContainer == null)
        {
            roomItemsContainer = transform;
            Debug.LogWarning("RoomManager: No room items container assigned, using own transform");
        }
    }

    /// <summary>
    /// Applies a wallpaper material to the room's walls
    /// </summary>
    public void ApplyWallpaper(Material wallpaperMaterial)
    {
        if (wallpaperMaterial == null)
        {
            Debug.LogError("RoomManager: Cannot apply wallpaper - material is null");
            return;
        }

        wallRenderer.material = wallpaperMaterial;
        SaveRoomState();
    }

    /// <summary>
    /// Applies a flooring material to the room's floor
    /// </summary>
    public void ApplyFlooring(Material floorMaterial)
    {
        if (floorMaterial == null)
        {
            Debug.LogError("RoomManager: Cannot apply flooring - material is null");
            return;
        }

        floorRenderer.material = floorMaterial;
        SaveRoomState();
    }

    /// <summary>
    /// Places a room item at the specified position
    /// </summary>
    public void PlaceItem(GameObject itemPrefab, ItemType itemType, Vector3 position)
    {
        if (itemPrefab == null)
        {
            Debug.LogError($"RoomManager: Cannot place {itemType} - prefab is null");
            return;
        }

        RemoveItem(itemType);

        // Calculate rotation based on item type
        Quaternion rotation = GetDefaultRotation(itemType);
        GameObject newItem = Instantiate(itemPrefab, position, rotation, roomItemsContainer);
        if (activeItems.ContainsKey(itemType))
        {
            activeItems[itemType] = newItem;
        }
        else
        {
            activeItems.Add(itemType, newItem);
        }
        SaveRoomState();
    }

    /// <summary>
    /// Removes an item of the specified type from the room
    /// </summary>
    public void RemoveItem(ItemType itemType)
    {
        if (activeItems.ContainsKey(itemType))
        {
            Destroy(activeItems[itemType]);
            activeItems.Remove(itemType);
        }
    }

    private Quaternion GetDefaultRotation(ItemType itemType)
    {
        switch (itemType)
        {
            case ItemType.Chair:
                // Rotate chair to face desk
                return Quaternion.Euler(0, 180, 0);
            case ItemType.Computer:
                // Face computer screen towards chair
                return Quaternion.Euler(0, 180, 0);
            case ItemType.Bed:
                // Place bed parallel to wall
                return Quaternion.Euler(0, 90, 0);
            case ItemType.Desk:
            case ItemType.Dresser:
                // Place against wall
                return Quaternion.Euler(0, 0, 0);
            default:
                return Quaternion.identity;
        }
    }

    private void SaveRoomState()
    {
        var roomData = new RoomData
        {
            WallMaterial = wallRenderer.material,
            FloorMaterial = floorRenderer.material
        };

        GameEvents.OnRoomCustomized?.Invoke(roomData);
    }

    private void LoadRoomState()
    {
        // TODO: Implement room state loading from save data
    }
}